#!/bin/sh

# container-tools - Manage systemd-nspawn containers
# Copyright (C) 2014-2016 Daniel Baumann <daniel.baumann@open-infrastructure.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e

COMMAND="$(basename ${0})"

CONFIG="/etc/container-tools/config"
MACHINES="/var/lib/machines"
INTERFACES_D="/etc/network/interfaces.d"

RUN_CLEANUP="false"

Parameters ()
{
	LONG_OPTIONS="name:,force,cleanup"
	OPTIONS="n:,f,c"

	PARAMETERS="$(getopt --longoptions ${LONG_OPTIONS} --name=${COMMAND} --options ${OPTIONS} --shell sh -- ${@})"

	if [ "${?}" != "0" ]
	then
		echo "'${COMMAND}': getopt exit" >&2
		exit 1
	fi

	eval set -- "${PARAMETERS}"

	while true
	do
		case "${1}" in
			-n|--name)
				NAME="${2}"
				shift 2
				;;

			-f|--force)
				FORCE="true"
				;;

			-c|--cleanup)
				RUN_CLEANUP="true"
				shift 1
				;;

			--)
				shift 1
				break
				;;

			*)
				echo "'${COMMAND}': getopt error" >&2
				exit 1
				;;
		esac
	done
}

Cleanup ()
{
	# Cleanup network configuration
	NETWORK_VETH_EXTRA_CONF="$(awk -F= '/^network-veth-extra=/ { print $2 }' ${CONFIG}/${NAME}.conf)"

	case "${NETWORK_VETH_EXTRA_CONF}" in
		"")
			;;

		*)
			for VETH in ${NETWORK_VETH_EXTRA_CONF}
			do
				INTERFACE="$(echo ${VETH} | awk -F: '{ print $1 }')"
				FILE="${INTERFACES_D}/${INTERFACE}"
				if [ -f "${FILE}" ]
				then
					rm -f "${FILE}"
				fi
			done
		;;
	esac
}

Usage ()
{
	echo "Usage: container ${COMMAND} -n|--name NAME [-f|--force]" >&2
	exit 1
}

Parameters "${@}"

if [ -z "${NAME}" ]
then
	Usage
fi

if [ ! -e "${MACHINES}/${NAME}" ]
then
	echo "'${NAME}': no such container" >&2
	exit 1
fi

STATE="$(machinectl show ${NAME} 2>&1 | awk -F= '/^State=/ { print $2 }')"

case "${RUN_CLEANUP}" in
	true)
		Cleanup
		exit 0
		;;

	*)
		;;
esac

case "${STATE}" in
	running)
		;;

	*)
		echo "'${NAME}': container is already stopped" >&2
		exit 1
		;;
esac

case "${FORCE}" in
	true)
		MODE="terminate"
		;;

	*)
		MODE="poweroff"
		;;
esac

# Run
machinectl ${MODE} ${NAME}
